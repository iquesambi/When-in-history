
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
require('./props.types-2d254dfb.js');
require('./input.styles-c4644543.js');
var CInput = require('./index-f4daa7da.js');

/**
 * Hey! Welcome to @chakra-ui/vue Textarea
 *
 * The Textarea component allows you to easily
 * create multi-line text inputs.
 *
 * @see Docs     https://vue.chakra-ui.com/textarea
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CTextarea/CTextarea.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CTextarea component
 *
 * the textarea element component
 *
 * @extends CInput
 * @see Docs https://vue.chakra-ui.com/textarea
 */

var CTextarea = {
  name: 'CTextarea',
  functional: true,
  model: {
    prop: 'value',
    event: 'change'
  },
  props: Object.assign({}, CInput.inputProps, {
    inputValue: String
  }),
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var listeners = ref.listeners;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data", "listeners"]);
    var rest = rest$1; // Default styles

    var defaultStyles = {
      py: '8px',
      minHeight: '80px',
      fontFamily: 'body',
      lineHeight: 'shorter'
    }; // Event listeners

    var nonNativeEvents = {
      input: function input(value, $e) {
        var emitChange = listeners.change;

        if (emitChange && $e instanceof Event) {
          if (typeof emitChange === 'function') {
            return emitChange(value, $e);
          }

          emitChange.forEach(function (listener) {
            return listener(value, $e);
          });
        }
      }
    };
    var ref$1 = utils.extractListeners({
      listeners: listeners
    }, nonNativeEvents);
    var nonNative = ref$1.nonNative;
    return h(CInput.CInput, Object.assign({}, rest, {
      props: Object.assign({}, utils.pickProperty(props), {
        as: 'textarea'
      }),
      attrs: Object.assign({}, defaultStyles, data.attrs || {}, {
        'data-chakra-component': 'CTextarea'
      }),
      on: nonNative
    }), slots().default);
  }
};

exports.default = CTextarea;
