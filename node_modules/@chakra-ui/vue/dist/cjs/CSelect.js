
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('./internal-icons-971c36f2.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
var CBox = require('./CBox.js');
var CIcon = require('./index-190bd03e.js');
require('./props.types-2d254dfb.js');
require('./input.styles-c4644543.js');
var CInput = require('./index-f4daa7da.js');

var rootOptions = {
  m: true,
  mt: true,
  mr: true,
  mb: true,
  ml: true,
  mx: true,
  my: true,
  margin: true,
  marginTop: true,
  marginBottom: true,
  marginLeft: true,
  marginRight: true,
  marginY: true,
  marginX: true,
  flex: true,
  flexBasis: true,
  width: true,
  minWidth: true,
  maxWidth: true,
  maxW: true,
  minW: true,
  w: true,
  zIndex: true,
  top: true,
  right: true,
  bottom: true,
  left: true,
  position: true,
  pos: true
};
/**
 * Splits all input[type="select"] props from the root node props
 * @param {Object} props Props object
 * @returns {Array<Object>}
 */

var splitProps = function splitProps(props) {
  var rootProps = {};
  var selectProps = {};

  for (var key in props) {
    var _key = utils.camelize(key);

    if (rootOptions[_key]) {
      rootProps[_key] = props[key];
    } else {
      selectProps[_key] = props[key];
    }
  }

  return [rootProps, selectProps];
};

/**
 * Hey! Welcome to @chakra-ui/vue CSelect
 *
 * Select component is a component that allows users
 * pick a value from predefined options.
 *
 * @see Docs     https://vue.chakra-ui.com/select
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CSelect/CSelect.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CSelectIconWrapper component
 *
 * The wrapper component for the select icon
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/select
 */

var CSelectIconWrapper = {
  name: 'SelectIconWrapper',
  functional: true,
  render: function render(h, ref) {
    var data = ref.data;
    var slots = ref.slots;
    var rest$1 = objectWithoutProperties(ref, ["data", "slots"]);
    var rest = rest$1;
    return h(CBox.default, Object.assign({}, rest, {
      attrs: Object.assign({}, data.attrs, {
        position: 'absolute',
        display: 'inline-flex',
        width: '1.5rem',
        height: '100%',
        alignItems: 'center',
        justifyContent: 'center',
        right: '0.5rem',
        top: '50%',
        pointerEvents: 'none',
        zIndex: 2,
        transform: 'translateY(-50%)',
        'data-chakra-component': 'CSelectIconWrapper'
      })
    }), slots().default);
  }
};
/**
 * CSelectInput component
 *
 * The select input component
 *
 * @extends CInput
 * @see Docs https://vue.chakra-ui.com/select
 */

var CSelectInput = {
  name: 'CSelectInput',
  functional: true,
  props: Object.assign({}, CInput.inputProps, {
    placeholder: String,
    value: String
  }),
  render: function render(h, ref) {
    var props = ref.props;
    var data = ref.data;
    var slots = ref.slots;
    var listeners = ref.listeners;
    var rest$1 = objectWithoutProperties(ref, ["props", "data", "slots", "listeners"]);
    var rest = rest$1;
    var nonNativeEvents = {
      change: function change(e) {
        var emitChange = listeners.change;

        if (emitChange) {
          emitChange(e);
        }
      }
    };
    var ref$1 = utils.extractListeners({
      listeners: listeners
    }, nonNativeEvents);
    var native = ref$1.native;
    var nonNative = ref$1.nonNative;
    return h(CInput.CInput, Object.assign({}, rest, {
      props: Object.assign({}, utils.pickProperty(props), {
        as: 'select'
      }),
      on: nonNative,
      nativeOn: native,
      domProps: {
        value: props.value
      },
      attrs: Object.assign({}, {
        appearance: 'none',
        pr: '2rem',
        pb: 'px',
        lineHeight: 'normal'
      }, data.attrs, {
        'data-chakra-component': 'CSelectInput'
      })
    }), [props.placeholder && h('option', {
      attrs: {
        value: ''
      }
    }, props.placeholder), slots().default]);
  }
};
/**
 * CSelect component
 *
 * The select wrapper component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/select
 */

var CSelect = {
  name: 'CSelect',
  mixins: [utils.createStyledAttrsMixin('CSelect')],
  model: {
    prop: 'value',
    event: 'change'
  },
  props: Object.assign({}, CInput.inputProps, {
    rootProps: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    icon: String,
    iconSize: {
      type: Number,
      default: 5
    },
    size: {
      type: String,
      default: 'md'
    },
    isReadOnly: Boolean,
    isDisabled: Boolean,
    placeholder: String,
    value: {
      type: String,
      default: ''
    }
  }),
  computed: {
    _color: function _color() {
      return this.colorMode === 'dark' ? 'whiteAlpha.800' : 'inherit';
    },
    _opacity: function _opacity() {
      return this.isReadOnly || this.isDisabled ? 0.5 : null;
    },
    _value: function _value() {
      return this.value;
    },
    allSplitProps: function allSplitProps() {
      return splitProps(this.$data.attrs$);
    },
    componentStyles: function componentStyles() {
      var ref = this.allSplitProps;
      var root = ref[0];
      return Object.assign({}, root, this.rootProps, {
        position: 'relative',
        width: '100%'
      });
    },
    filteredComputedAttrs: function filteredComputedAttrs() {
      // filter ID from attributes to not insert it on both the wrapper
      // and the select itself. See https://github.com/chakra-ui/chakra-ui-vue/issues/484
      var removeIdFromAttrs = Object.entries(this.computedAttrs).filter(function (ref) {
        var key = ref[0];
        var _attr = ref[1];
        return key !== 'id';
      });
      return Object.fromEntries(removeIdFromAttrs);
    }
  },
  render: function render(h) {
    var this$1 = this;
    var ref = this.$props;
    var icon = ref.icon;
    var iconSize = ref.iconSize;
    var ref$1 = this.allSplitProps;
    var select = ref$1[1];
    return h('div', {
      class: [this.className],
      attrs: Object.assign({}, this.filteredComputedAttrs, {
        'data-chakra-component': 'CSelect'
      })
    }, [h(CSelectInput, {
      props: Object.assign({}, {
        placeholder: this.placeholder
      }, utils.pickProperty(this.$props)),
      attrs: Object.assign({}, {
        color: this._color
      }, select, {
        value: this._value
      }),
      on: {
        change: function change(e) {
          this$1.$emit('change', e.target.value);
        }
      }
    }, this.$slots.default), h(CSelectIconWrapper, {
      attrs: {
        opacity: this._opacity,
        color: select.color || this._color
      }
    }, [h(CIcon.CIcon, {
      props: {
        name: icon || 'chevron-down',
        size: iconSize
      },
      attrs: {
        focusable: false,
        'aria-hidden': true
      }
    })])]);
  }
};

exports.default = CSelect;
