
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('./internal-icons-971c36f2.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
var CBox = require('./CBox.js');
var CIcon = require('./index-190bd03e.js');
var props_types = require('./props.types-2d254dfb.js');
var CVisuallyHidden = require('./CVisuallyHidden.js');
var CControlBox = require('./CControlBox.js');
var checkbox_styles = require('./checkbox.styles-e5275bb2.js');

/**
 * Hey! Welcome to @chakra-ui/vue Checkbox
 *
 * CCheckbox component is used in forms when a user needs to select multiple values from several options.
 *
 * @see Docs     https://vue.chakra-ui.com/checkbox
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCheckbox/CCheckbox.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCheckbox/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#button
 */
/**
 * CCheckbox component
 *
 * Checkbox component is used in forms when a user needs to select multiple values from several options.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/checkbox
 */

var CCheckbox = {
  name: 'CCheckbox',
  mixins: [utils.createStyledAttrsMixin('CCheckbox')],
  model: {
    prop: 'isChecked',
    event: 'change'
  },
  props: {
    id: String,
    name: String,
    value: [String, Boolean],
    ariaLabel: String,
    ariaLabelledBy: String,
    variantColor: {
      type: String,
      default: 'blue'
    },
    defaultIsChecked: Boolean,
    isChecked: {
      type: Boolean,
      default: false
    },
    isFullWidth: Boolean,
    size: {
      type: String,
      default: 'md'
    },
    isDisabled: Boolean,
    isInvalid: Boolean,
    isReadOnly: Boolean,
    isIndeterminate: Boolean,
    iconColor: props_types.StringArray,
    iconSize: {
      type: props_types.StringNumber,
      default: '10px'
    }
  },
  computed: {
    checkBoxStyles: function checkBoxStyles() {
      return checkbox_styles.useCheckboxStyle({
        color: this.variantColor,
        size: this.size,
        colorMode: this.colorMode
      });
    },
    componentStyles: function componentStyles() {
      return {
        display: 'inline-flex',
        verticalAlign: 'top',
        alignItems: 'center',
        width: this.isFullWidth ? 'full' : undefined,
        cursor: this.isDisabled ? 'not-allowed' : 'pointer'
      };
    },
    _id: function _id() {
      return this.id || "checkbox-" + utils.useId(4);
    }
  },
  created: function created() {
    // Ensure that the use of the variantColor props is consistent with theme.
    utils.useVariantColorWarning(this.theme, 'Checkbox', this.variantColor);
  },
  methods: {
    handleChange: function handleChange(e) {
      this.$emit('change', !this.isChecked, e);
    }
  },
  render: function render(h) {
    var children = this.$slots.default;
    return h('label', {
      class: this.className,
      attrs: Object.assign({}, {
        for: this._id
      }, this.computedAttrs)
    }, [h(CVisuallyHidden.default, {
      props: {
        as: 'input'
      },
      domProps: {
        value: this.value,
        defaultChecked: this.isReadOnly ? undefined : this.defaultIsChecked,
        checked: this.isReadOnly ? this.isChecked : this.defaultIsChecked ? undefined : this.isChecked
      },
      attrs: {
        name: this.name,
        type: 'checkbox',
        id: this._id,
        'aria-label': this.ariaLabel,
        'aria-labelledby': this.ariaLabelledBy,
        disabled: this.isDisabled,
        readOnly: this.isReadOnly,
        'aria-readonly': this.isReadOnly,
        'aria-invalid': this.isInvalid,
        'aria-checked': this.isIndeterminate ? 'mixed' : this.isChecked
      },
      on: {
        change: this.isReadOnly ? undefined : this.handleChange
      }
    }), h(CControlBox.default, {
      attrs: Object.assign({}, {
        opacity: this.isReadOnly ? 0.8 : 1
      }, this.checkBoxStyles)
    }, [h(CIcon.CIcon, {
      props: {
        name: this.isIndeterminate ? 'minus' : 'check',
        size: this.iconSize,
        color: this.iconColor,
        transition: 'transform 240ms, opacity 240ms'
      }
    })]), children && h(CBox.default, {
      attrs: {
        ml: 2,
        fontSize: this.size,
        fontFamily: 'body',
        userSelect: 'none',
        opacity: this.isDisabled ? 0.4 : 1
      }
    }, children)]);
  }
};

exports.default = CCheckbox;
