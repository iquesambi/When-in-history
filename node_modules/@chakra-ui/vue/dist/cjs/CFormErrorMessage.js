
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('./internal-icons-971c36f2.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
var CIcon = require('./index-190bd03e.js');
require('./props.types-2d254dfb.js');
var CFlex = require('./index-6708ec7a.js');
var formcontrol_props = require('./formcontrol.props-f99e6e27.js');
require('./text.utils-e344d432.js');
var CText = require('./CText.js');

/**
 * Hey! Welcome to @chakra-ui/vue CFormErrorMessage
 *
 * Receives validation information from the `CFormControl`
 * component and displays the validation message
 *
 * @see Docs     https://vue.chakra-ui.com/formcontrol
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CFormErrorMessage/CFormErrorMessage.js
 * @see WAI      https://www.w3.org/WAI/tutorials/forms/
 */
/**
 * CFormControl component
 *
 * Displays validation message content if it received
 * `isInvalid` from context
 *
 * @extends CFlex
 * @see Docs https://vue.chakra-ui.com/formcontrol
 */

var CFormErrorMessage = {
  name: 'CFormErrorMessage',
  inject: ['$chakraColorMode', '$useFormControl'],
  props: Object.assign({}, {
    icon: {
      type: String,
      default: 'warning'
    },
    as: String
  }, formcontrol_props.formControlProps),
  computed: {
    formControl: function formControl() {
      return this.$useFormControl(this.$props);
    },
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    }
  },
  render: function render(h) {
    if (!this.formControl.isInvalid) {
      return null;
    }

    var color = {
      light: 'red.500',
      dark: 'red.300'
    };
    return h(CFlex.CFlex, {
      props: {
        as: this.as
      },
      attrs: Object.assign({}, {
        color: color[this.colorMode],
        mt: 2,
        fontSize: 'sm',
        align: 'center',
        id: this.formControl.id ? this.formControl.id + "-error-message" : null
      }, this.$attrs, {
        'data-chakra-component': 'CFormErrorMessage'
      })
    }, [h(CIcon.CIcon, {
      props: {
        name: this.icon
      },
      attrs: {
        mr: '0.5em',
        'aria-hidden': true
      }
    }), h(CText.default, {
      attrs: {
        lineHeight: 'normal'
      }
    }, this.$slots.default)]);
  }
};

exports.default = CFormErrorMessage;
