
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
var CBox = require('./CBox.js');
var props_types = require('./props.types-2d254dfb.js');

/**
 * Hey! Welcome to @chakra-ui/vue CCheckboxGroup
 *
 * CCheckboxGroup component allows the user to group a
 * related collection of checkboxes in one visual region.
 *
 * @see Docs     https://vue.chakra-ui.com/checkbox
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCheckboxGroup/CCheckboxGroup.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCheckbox/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#button
 */
/**
 * CButtonGroup component
 *
 * Wrapper for children `CCheckbox` components
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/button
 */

var CCheckboxGroup = {
  name: 'CCheckboxGroup',
  mixins: [utils.createStyledAttrsMixin('CCheckboxGroup')],
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    name: String,
    variantColor: String,
    size: String,
    defaultValue: Array,
    isInline: Boolean,
    value: Array,
    spacing: {
      type: props_types.SNA,
      default: 2
    }
  },
  data: function data() {
    return {
      values: this.defaultValue || []
    };
  },
  computed: {
    isControlled: function isControlled() {
      return utils.isDef(this.value);
    },
    _values: function _values() {
      return this.isControlled ? this.value : this.values;
    },
    checkboxName: function checkboxName() {
      return this.name || "checkbox-group-" + utils.useId();
    }
  },
  methods: {
    /**
     * Handles change event for checkbox group
     * @param {Event} event Event object
     */
    onChange: function onChange(val, event) {
      var ref = event.target;
      var checked = ref.checked;
      var value = ref.value;
      var newValues;

      if (checked) {
        newValues = this._values.concat([value]);
      } else {
        newValues = this._values.filter(function (val) {
          return val !== value;
        });
      }

      if (!this.isControlled) {
        this.values = newValues;
      }

      this.$emit('change', newValues);
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = utils.cleanChildren(this.$slots.default);
    var clones = children.map(function (vnode, index) {
      var isLastCheckbox = children.length === index + 1;
      var spacingProps = this$1.isInline ? {
        mr: this$1.spacing
      } : {
        mb: this$1.spacing
      };
      var el = utils.cloneVNodeElement(vnode, {
        props: {
          size: this$1.size,
          variantColor: this$1.variantColor,
          name: this$1.checkboxName + "-" + index,
          isChecked: this$1._values.includes(vnode.componentOptions.propsData.value)
        },
        on: {
          change: this$1.onChange
        }
      }, h);
      return h(CBox.default, {
        attrs: Object.assign({}, {
          display: this$1.isInline ? 'inline-block' : 'block'
        }, !isLastCheckbox && spacingProps)
      }, [el]);
    });
    return h('div', {
      class: [this.className],
      attrs: Object.assign({}, this.computedAttrs, {
        role: 'group'
      })
    }, clones);
  }
};

exports.default = CCheckboxGroup;
