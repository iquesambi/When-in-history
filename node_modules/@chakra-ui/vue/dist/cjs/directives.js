
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
var clickoutside_directive = require('./clickoutside.directive-e742e45f.js');
var css = require('@emotion/css');
var Css = require('./Css.js');
require('vue');
require('./color-mode-observer-121d1df0.js');

/** Purify Chakra attributes */

var purifyAttrs = function purifyAttrs(el, props) {
  for (var attr in props) {
    el.removeAttribute(attr);
    el.removeAttribute(utils.kebabify(attr));
  }
};
/** Purify's Chakra Attributes from VNode object */


var purifyVNodeAttrs = function purifyVNodeAttrs(vnode, props) {
  if (props && vnode.data.attrs) {
    for (var attr in props) {
      delete vnode.data.attrs[utils.kebabify(attr)];
    }
  }
};
/** Creates SSR `v-chakra` directive for Nuxt */


function createServerDirective(theme) {
  /** Applies server-side className */
  var applyServerClassName = function applyServerClassName(vnode, className, styleAttrs) {
    if (vnode.data.class) {
      vnode.data.class += " " + className;
    } else {
      vnode.data.class = className;
    }
    /**
     * Only remove style attributes
     * from VNode if directive has no
     * arguments
     **/


    if (styleAttrs) {
      purifyVNodeAttrs(vnode, styleAttrs);
    }
  };

  return function (vnode, directive) {
    var ref = utils.extractChakraAttrs(vnode.data.attrs);
    var styleAttrs = ref.styleAttrs;
    var className = css.css(Css.default(styleAttrs)(theme));
    applyServerClassName(vnode, className, styleAttrs);

    if (directive.value) {
      if (utils._typeof(directive.value) === 'object') {
        var className$1 = css.css(Css.default(directive.value)(theme));
        applyServerClassName(vnode, className$1);
      }

      if (typeof directive.value === 'function') {
        var styles = directive.value(theme);
        var className$2 = css.css(Css.default(styles)(theme));
        applyServerClassName(vnode, className$2);
      }
    }
  };
}
/** Creates Client `v-chakra` Directive */

function createClientDirective(theme) {
  function applyClientStyles(el, binding, vnode) {
    var ref = utils.extractChakraAttrs(vnode.data.attrs);
    var styleAttrs = ref.styleAttrs;
    var className = css.css(Css.default(styleAttrs)(theme));
    el.classList.add(className);
    purifyAttrs(el, styleAttrs);

    if (binding.value) {
      if (utils._typeof(binding.value) === 'object') {
        var className$1 = css.css(Css.default(binding.value)(theme));
        el.classList.add(className$1);
      }

      if (typeof binding.value === 'function') {
        var styles = binding.value(theme);
        var className$2 = css.css(Css.default(styles)(theme));
        el.classList.add(className$2);
      }
    }
  }

  return {
    bind: applyClientStyles,
    update: applyClientStyles,
    componentUpdated: applyClientStyles,
    unbind: applyClientStyles
  };
}

exports.ClickOutsideDirective = clickoutside_directive.ClickOutside;
exports.createClientDirective = createClientDirective;
exports.createServerDirective = createServerDirective;
