
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-aaaef82b.js');
require('./chakra-ui-styled-system.esm-0de8acbf.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-121d1df0.js');
require('./anime.es-43f447cf.js');
var CBox = require('./CBox.js');
var CTransition = require('./CTransition.js');

/**
 * Hey! Welcome to @chakra-ui/vue Collapse
 *
 * The Collapse component is used to create regions of content
 * that can expand/collapse with a simple animation. It helps to hide
 * content that's not immediately relevant to the user.
 *
 * @see Docs     https://vue.chakra-ui.com/collapse
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCollapse/CCollapse.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CCollapse component
 *
 * Create regions of content that can expand/collapse
 * with a simple animation.
 *
 * @extends CAnimateHeight
 * @see Docs https://vue.chakra-ui.com/collpse
 */

var CCollapse = {
  name: 'CCollapse',
  functional: true,
  props: {
    isOpen: Boolean,
    duration: {
      type: Number,
      default: 250
    },
    easing: {
      type: String,
      default: 'easeInOutSine'
    },
    startingHeight: Number,
    endingHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    }
  },
  render: function render(h, ref) {
    var slots = ref.slots;
    var props = ref.props;
    var data = ref.data;
    var listeners = ref.listeners;
    var rest$1 = objectWithoutProperties(ref, ["slots", "props", "data", "listeners"]);
    var rest = rest$1; // Get children

    var children = slots().default; // Handle events

    var nonNativeEvents = {
      start: function start(e) {
        var emitStart = listeners.start;

        if (emitStart) {
          emitStart('start', e);
        }
      },
      finish: function finish(e) {
        var emitFinish = listeners.finish;

        if (emitFinish) {
          emitFinish('finish', e);
        }
      }
    };
    var ref$1 = utils.extractListeners({
      listeners: listeners
    }, nonNativeEvents);
    var native = ref$1.native;
    var nonNative = ref$1.nonNative;
    return h(CTransition.CAnimateHeight, Object.assign({}, rest, {
      props: {
        isOpen: props.isOpen,
        duration: props.duration,
        enterEasing: props.easing,
        leaveEasing: props.easing,
        initialHeight: props.startingHeight,
        finalHeight: props.endingHeight,
        animateOpacity: props.animateOpacity
      },
      on: nonNative,
      nativeOn: native,
      attrs: {
        'data-chakra-component': 'CCollapse'
      }
    }), [h(CBox.default, {
      props: {
        as: props.as
      },
      attrs: data.attrs
    }, children)]);
  }
};

exports.default = CCollapse;
