
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { C as cleanChildren, a as pickProperty } from './index-2216d089.js';
import './chakra-ui-styled-system.esm-a8a2e91f.js';
import './internal-icons-3bdf43cd.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-de5da461.js';
import CBox from './CBox.js';
import { C as CIcon } from './index-ff45b78b.js';
import './props.types-cbb7b1ff.js';
import { C as CFlex } from './index-dbd7e06a.js';
import './text.utils-6bf402a1.js';
import CText from './CText.js';

/**
 * Hey! Welcome to @chakra-ui/vue Stat
 *
 * The Stat component is used to display a single statistic.
 *
 * @see Docs     https://vue.chakra-ui.com/stat
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CStat/CStat.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * Stat Arrow options
 */

var arrowOptions = {
  increase: {
    name: 'triangle-up',
    color: 'green.400'
  },
  decrease: {
    name: 'triangle-down',
    color: 'red.400'
  }
};
/**
 * CStat component
 *
 * Stat wrapper component for it's children
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStat = {
  name: 'CStat',
  functional: true,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    var children = cleanChildren(slots().default);
    return h(CBox, Object.assign({}, rest, {
      props: {
        as: props.as
      },
      attrs: Object.assign({}, {
        flex: 1,
        pr: 4,
        position: 'relative'
      }, data.attrs || {}, {
        'data-chakra-component': 'CStat'
      })
    }), children);
  }
};
/**
 * CStatGroup component
 *
 * group component for stat
 *
 * @extends CFlex
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStatGroup = {
  name: 'CStatGroup',
  functional: true,
  props: CFlex.props,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    var children = cleanChildren(slots().default);
    return h(CFlex, Object.assign({}, rest, {
      props: Object.assign({}, {
        flexWrap: 'wrap',
        justifyContent: 'space-around',
        alignItems: 'flex-start'
      }, pickProperty(props)),
      attrs: Object.assign({}, data.attrs || {}, {
        'data-chakra-component': 'CStatGroup'
      })
    }), children);
  }
};
/**
 * CStatArrow component
 *
 * Arrow component for stat
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStatArrow = {
  name: 'CStatArrow',
  functional: true,
  props: Object.assign({}, CIcon.props, {
    type: {
      type: String,
      default: 'increase'
    }
  }),
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    return h(CIcon, Object.assign({}, rest, {
      props: Object.assign({}, {
        size: '14px'
      }, arrowOptions[props.type], pickProperty(props)),
      attrs: Object.assign({}, {
        mr: 1,
        verticalAlign: 'middle'
      }, data.attrs || {}, {
        color: arrowOptions[props.type].color,
        'data-chakra-component': 'CStatArrow'
      })
    }));
  }
};
/**
 * CStatNumber component
 *
 * number component for stat
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStatNumber = {
  name: 'CStatNumber',
  functional: true,
  props: CText.props,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    return h(CText, Object.assign({}, rest, {
      props: pickProperty(props),
      attrs: Object.assign({}, {
        fontSize: '2xl',
        verticalAlign: 'baseline',
        fontWeight: 'semibold'
      }, data.attrs || {}, {
        'data-chakra-component': 'CStatNumber'
      })
    }), slots().default);
  }
};
/**
 * CStatHelperText component
 *
 * text component for stat
 *
 * @extends CText
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStatHelperText = {
  name: 'CStatHelperText',
  functional: true,
  props: CText.props,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    return h(CText, Object.assign({}, rest, {
      props: pickProperty(props),
      attrs: Object.assign({}, {
        fontSize: 'sm',
        opacity: 0.8,
        mb: 2
      }, data.attrs || {}, {
        'data-chakra-component': 'CStatHelperText'
      })
    }), slots().default);
  }
};
/**
 * CStatLabel component
 *
 * label text component for stat
 *
 * @extends CText
 * @see Docs https://vue.chakra-ui.com/stat
 */

var CStatLabel = {
  name: 'CStatLabel',
  functional: true,
  props: CText.props,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    return h(CText, Object.assign({}, rest, {
      props: pickProperty(props),
      attrs: Object.assign({}, {
        fontWeight: 'medium',
        fontSize: 'sm'
      }, data.attrs || {}, {
        'data-chakra-component': 'CStatLabel'
      })
    }), slots().default);
  }
};

export { CStat, CStatArrow, CStatGroup, CStatHelperText, CStatLabel, CStatNumber };
