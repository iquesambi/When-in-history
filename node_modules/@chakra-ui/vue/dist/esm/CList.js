
/*
 * ! @chakra-ui/vue v0.13.1 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, M as isDef, C as cleanChildren, A as cloneVNodeElement } from './index-2216d089.js';
import './chakra-ui-styled-system.esm-a8a2e91f.js';
import './internal-icons-3bdf43cd.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-de5da461.js';
import { C as CIcon } from './index-ff45b78b.js';
import { a as SNA } from './props.types-cbb7b1ff.js';

/**
 * Hey! Welcome to @chakra-ui/vue List
 *
 * `CList` is used to display list items
 *
 * @see Docs     https://vue.chakra-ui.com/list
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CList/CList.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CList component
 *
 * The list container element
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/list
 */

var CList = {
  name: 'CList',
  mixins: [createStyledAttrsMixin('CList')],
  props: {
    styleType: {
      type: String,
      default: 'none'
    },
    stylePos: {
      type: String,
      default: 'inside'
    },
    spacing: SNA
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        listStyleType: this.styleType,
        listStylePosition: this.stylePos
      };
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!isDef(children)) {
      console.error('[Chakra-ui: List]: List component expects at east one child');
      return null;
    }

    var validChildren = cleanChildren(children);
    var clones = validChildren.map(function (vnode, index) {
      var isLast = index + 1 === validChildren.length;

      if (isLast) {
        return vnode;
      }

      var clone = cloneVNodeElement(vnode, {
        attrs: {
          mb: this$1.spacing
        }
      }, h);
      return clone;
    });
    return h('ul', {
      class: [this.className],
      attrs: this.computedAttrs,
      on: this.computedListeners
    }, clones);
  }
};
/**
 * CListItem component
 *
 * The list item element
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/list
 */

var CListItem = {
  name: 'CListItem',
  mixins: [createStyledAttrsMixin('CListItem')],
  props: {
    spacing: SNA
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        mb: this.spacing
      };
    }
  },
  render: function render(h) {
    return h('li', {
      class: [this.className],
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};
/**
 * CListIcon component
 *
 * The list item icon element
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/list
 */

var CListIcon = {
  name: 'CListIcon',
  functional: true,
  props: {
    icon: String
  },
  render: function render(h, ref) {
    var props = ref.props;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "data"]);
    var rest = rest$1;
    return h(CIcon, Object.assign({}, rest, {
      props: {
        name: props.icon
      },
      attrs: Object.assign({}, {
        mr: 2
      }, data.attrs, {
        'data-chakra-component': 'CListIcon'
      })
    }));
  }
};

export default CList;
export { CListIcon, CListItem };
